import { StatusCodes } from 'http-status-codes';

export default class CustomError extends Error {
  date: Date;
  message: any;
  status: number = StatusCodes.BAD_REQUEST;

  constructor(errorSlug: string = '', ...params: string[]) {
    super(...params);

    this.name = errorSlug;
    this.date = new Date();

    // Maintains proper stack trace for where our error was thrown (only available on V8)
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, CustomError);
    }
  }

  /**
   * field like error generating method
   * @param fieldName
   * @param message
   */
  public fieldError(fieldName: string, message: any, status?: number): this {
    this.message = { [fieldName]: message };
    this.setStatus(status);
    return this;
  }

  /**
   * it wraps error generated by enum and returns it back
   * @param _enum
   */
  public enumError(_enum?: any, status?: number): this {
    this.message = _enum[this.name].message;
    this.setStatus(status || _enum[this.name].status);
    return this;
  }

  /**
   * it wraps the enum error in field base error,
   * that enum should have key param in it
   * @param _enum
   */
  public fieldEnumError(_enum: any, status?: number): this {
    this.message = { [_enum[this.name].key]: _enum[this.name].message };
    this.setStatus(status || _enum[this.name].status);
    return this;
  }

  // Send the exact same error as received
  // it could be of any data type
  public sendThisError(err: any, status?: number) {
    this.message = err;
    this.setStatus(status);
    return this;
  }

  private setStatus(status?: number): void {
    if (status) this.status = status;
  }
}
